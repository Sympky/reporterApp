name: Laravel Tests

on:
  workflow_dispatch:  # Add manual trigger
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, sqlite3
        coverage: xdebug
        tools: composer:v2

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-scripts --no-interaction --prefer-dist --optimize-autoloader

    - name: Copy .env
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Set directory permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Setup Vite mock for testing
      run: |
        mkdir -p public/build/assets
        
        # Create a comprehensive mock manifest with all needed components
        echo '{
          "resources/js/app.tsx": {
            "file": "assets/app-mock.js",
            "src": "resources/js/app.tsx",
            "isEntry": true,
            "css": ["assets/app-mock.css"]
          },
          "resources/js/pages/auth/Login.tsx": {
            "file": "assets/auth-login-mock.js",
            "src": "resources/js/pages/auth/Login.tsx"
          },
          "resources/js/pages/auth/Register.tsx": {
            "file": "assets/auth-register-mock.js",
            "src": "resources/js/pages/auth/Register.tsx"
          },
          "resources/js/pages/auth/ForgotPassword.tsx": {
            "file": "assets/auth-forgot-password-mock.js",
            "src": "resources/js/pages/auth/ForgotPassword.tsx"
          },
          "resources/js/pages/auth/ResetPassword.tsx": {
            "file": "assets/auth-reset-password-mock.js",
            "src": "resources/js/pages/auth/ResetPassword.tsx"
          },
          "resources/js/pages/auth/VerifyEmail.tsx": {
            "file": "assets/auth-verify-email-mock.js",
            "src": "resources/js/pages/auth/VerifyEmail.tsx"
          },
          "resources/js/pages/auth/ConfirmPassword.tsx": {
            "file": "assets/auth-confirm-password-mock.js",
            "src": "resources/js/pages/auth/ConfirmPassword.tsx"
          },
          "resources/js/pages/Profile/Edit.tsx": {
            "file": "assets/profile-edit-mock.js",
            "src": "resources/js/pages/Profile/Edit.tsx"
          },
          "resources/js/pages/Profile/Partials/DeleteUserForm.tsx": {
            "file": "assets/profile-delete-user-form-mock.js",
            "src": "resources/js/pages/Profile/Partials/DeleteUserForm.tsx"
          },
          "resources/js/pages/Profile/Partials/UpdatePasswordForm.tsx": {
            "file": "assets/profile-update-password-form-mock.js",
            "src": "resources/js/pages/Profile/Partials/UpdatePasswordForm.tsx"
          },
          "resources/js/pages/Profile/Partials/UpdateProfileInformationForm.tsx": {
            "file": "assets/profile-update-profile-information-form-mock.js",
            "src": "resources/js/pages/Profile/Partials/UpdateProfileInformationForm.tsx"
          },
          "resources/js/pages/Dashboard.tsx": {
            "file": "assets/dashboard-mock.js",
            "src": "resources/js/pages/Dashboard.tsx"
          },
          "resources/js/pages/VulnerabilityTemplates/Index.tsx": {
            "file": "assets/vulnerability-templates-index-mock.js",
            "src": "resources/js/pages/VulnerabilityTemplates/Index.tsx"
          },
          "resources/js/pages/VulnerabilityTemplates/Create.tsx": {
            "file": "assets/vulnerability-templates-create-mock.js",
            "src": "resources/js/pages/VulnerabilityTemplates/Create.tsx"
          },
          "resources/js/pages/VulnerabilityTemplates/Edit.tsx": {
            "file": "assets/vulnerability-templates-edit-mock.js",
            "src": "resources/js/pages/VulnerabilityTemplates/Edit.tsx"
          },
          "resources/js/pages/Vulnerabilities/Index.tsx": {
            "file": "assets/vulnerabilities-index-mock.js",
            "src": "resources/js/pages/Vulnerabilities/Index.tsx"
          },
          "resources/js/pages/Vulnerabilities/Create.tsx": {
            "file": "assets/vulnerabilities-create-mock.js",
            "src": "resources/js/pages/Vulnerabilities/Create.tsx"
          },
          "resources/js/pages/Vulnerabilities/Edit.tsx": {
            "file": "assets/vulnerabilities-edit-mock.js",
            "src": "resources/js/pages/Vulnerabilities/Edit.tsx"
          },
          "resources/js/pages/Vulnerabilities/Show.tsx": {
            "file": "assets/vulnerabilities-show-mock.js",
            "src": "resources/js/pages/Vulnerabilities/Show.tsx"
          },
          "resources/js/pages/reports/templates/index.tsx": {
            "file": "assets/reports-templates-index-mock.js",
            "src": "resources/js/pages/reports/templates/index.tsx"
          },
          "resources/js/pages/reports/templates/create.tsx": {
            "file": "assets/reports-templates-create-mock.js",
            "src": "resources/js/pages/reports/templates/create.tsx"
          },
          "resources/js/pages/reports/templates/edit.tsx": {
            "file": "assets/reports-templates-edit-mock.js",
            "src": "resources/js/pages/reports/templates/edit.tsx"
          },
          "resources/js/pages/reports/create/index.tsx": {
            "file": "assets/reports-create-index-mock.js",
            "src": "resources/js/pages/reports/create/index.tsx"
          },
          "resources/js/pages/reports/create/SelectTemplate.tsx": {
            "file": "assets/reports-create-selecttemplate-mock.js",
            "src": "resources/js/pages/reports/create/SelectTemplate.tsx"
          },
          "resources/js/pages/reports/create/SelectClientProject.tsx": {
            "file": "assets/reports-create-selectclientproject-mock.js",
            "src": "resources/js/pages/reports/create/SelectClientProject.tsx"
          }
        }' > public/build/manifest.json
        
        # Create all needed mock asset files
        echo '// Mock JS file' > public/build/assets/app-mock.js
        echo '/* Mock CSS file */' > public/build/assets/app-mock.css
        
        for file in auth-login-mock.js auth-register-mock.js auth-forgot-password-mock.js auth-reset-password-mock.js auth-verify-email-mock.js auth-confirm-password-mock.js profile-edit-mock.js profile-delete-user-form-mock.js profile-update-password-form-mock.js profile-update-profile-information-form-mock.js dashboard-mock.js vulnerability-templates-index-mock.js vulnerability-templates-create-mock.js vulnerability-templates-edit-mock.js vulnerabilities-index-mock.js vulnerabilities-create-mock.js vulnerabilities-edit-mock.js vulnerabilities-show-mock.js reports-templates-index-mock.js reports-templates-create-mock.js reports-templates-edit-mock.js reports-create-index-mock.js reports-create-selecttemplate-mock.js reports-create-selectclientproject-mock.js; do
          echo "// Mock JS file for ${file}" > "public/build/assets/${file}"
        done

    - name: Create SQLite database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Run migrations with seeds
      run: php artisan migrate --seed --force
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: ${{ github.workspace }}/database/database.sqlite
        DB_TRANSACTION_NESTING: false
        VITE_MANIFEST_MOCK: true

    - name: Run Unit Tests
      run: php artisan test tests/Unit --coverage-clover=coverage-unit.xml
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: ":memory:"
        DB_TRANSACTION_NESTING: false
        VITE_MANIFEST_MOCK: true
        XDEBUG_MODE: coverage

    - name: Run Feature Tests
      run: php artisan test tests/Feature --coverage-clover=coverage-feature.xml
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: ":memory:"
        DB_TRANSACTION_NESTING: false
        VITE_MANIFEST_MOCK: true
        XDEBUG_MODE: coverage

    - name: Merge coverage reports
      run: |
        php -r '
        $unit = simplexml_load_file("coverage-unit.xml");
        $feature = simplexml_load_file("coverage-feature.xml");
        
        // Combine metrics
        $unit_metrics = $unit->project->metrics;
        $feature_metrics = $feature->project->metrics;
        
        $combined_metrics = clone $unit_metrics;
        $combined_metrics["statements"] = (int)$unit_metrics["statements"] + (int)$feature_metrics["statements"];
        $combined_metrics["coveredstatements"] = (int)$unit_metrics["coveredstatements"] + (int)$feature_metrics["coveredstatements"];
        $combined_metrics["methods"] = (int)$unit_metrics["methods"] + (int)$feature_metrics["methods"];
        $combined_metrics["coveredmethods"] = (int)$unit_metrics["coveredmethods"] + (int)$feature_metrics["coveredmethods"];
        $combined_metrics["elements"] = (int)$unit_metrics["elements"] + (int)$feature_metrics["elements"];
        $combined_metrics["coveredelements"] = (int)$unit_metrics["coveredelements"] + (int)$feature_metrics["coveredelements"];
        
        $unit->project->metrics = $combined_metrics;
        
        // Add feature test files data
        foreach ($feature->project->file as $file) {
            $exists = false;
            foreach ($unit->project->file as $unit_file) {
                if ((string)$unit_file["name"] === (string)$file["name"]) {
                    $exists = true;
                    break;
                }
            }
            if (!$exists) {
                $new_file = $unit->project->addChild("file");
                foreach ($file->attributes() as $name => $value) {
                    $new_file->addAttribute($name, $value);
                }
                foreach ($file->children() as $child) {
                    $new_child = $new_file->addChild($child->getName());
                    foreach ($child->attributes() as $name => $value) {
                        $new_child->addAttribute($name, $value);
                    }
                }
            }
        }
        
        $unit->asXML("coverage.xml");
        '
        if [ ! -f coverage.xml ]; then
          # If merging fails, just use the unit test coverage
          cp coverage-unit.xml coverage.xml
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs
        path: |
          ./storage/logs
          ./phpunit.xml
          ./database/database.sqlite
          ./coverage-*.xml 