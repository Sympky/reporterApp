<?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreVulnerabilityRequest;
use App\Http\Requests\UpdateVulnerabilityRequest;
use App\Models\Vulnerability;
use App\Models\Project;
use App\Models\Client;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class VulnerabilityController extends Controller
{
    /**
     * Display a listing of the resource for a specific project.
     */
    public function index(Project $project)
    {
        // Fetch vulnerabilities for the specified project
        $vulnerabilities = $project->vulnerabilities;

        // Return the vulnerabilities as a JSON response
        return response()->json($vulnerabilities);
    }

    /**
     * Display a listing of all vulnerabilities.
     */
    public function allVulnerabilities()
    {
        $vulnerabilities = Vulnerability::with(['project.client'])
            ->where('is_template', false)
            ->orderBy('created_at', 'desc')
            ->get();

        // Map the vulnerabilities to include project and client names
        $vulnerabilitiesWithDetails = $vulnerabilities->map(function ($vulnerability) {
            return [
                'id' => $vulnerability->id,
                'project_id' => $vulnerability->project_id,
                'project_name' => $vulnerability->project->name,
                'client_name' => $vulnerability->project->client->name,
                'name' => $vulnerability->name,
                'description' => $vulnerability->description,
                'severity' => $vulnerability->severity,
                'cvss' => $vulnerability->cvss,
                'cve' => $vulnerability->cve,
                'remediation' => $vulnerability->recommendations,
                'discovered_at' => $vulnerability->discovered_at,
            ];
        });

        $projects = Project::with('client')
            ->get()
            ->map(function ($project) {
                return [
                    'id' => $project->id,
                    'name' => $project->name,
                    'client_name' => $project->client->name,
                ];
            });

        return Inertia::render('vulnerabilities/index', [
            'vulnerabilities' => $vulnerabilitiesWithDetails,
            'projects' => $projects,
        ]);
    }

    /**
     * Display a listing of all vulnerability templates.
     */
    public function templates()
    {
        $templates = Vulnerability::where('is_template', true)
            ->orderBy('created_at', 'desc')
            ->get();

        // Map the templates with needed details
        $templatesWithDetails = $templates->map(function ($template) {
            return [
                'id' => $template->id,
                'name' => $template->name,
                'description' => $template->description,
                'severity' => $template->severity,
                'cvss' => $template->cvss,
                'cve' => $template->cve,
                'remediation' => $template->recommendations,
                'impact' => $template->impact,
                'references' => $template->references,
                'tags' => $template->tags,
            ];
        });

        // Get projects for template assignment
        $projects = Project::with('client')
            ->get()
            ->map(function ($project) {
                return [
                    'id' => $project->id,
                    'name' => $project->name,
                    'client_name' => $project->client->name,
                ];
            });

        return Inertia::render('vulnerabilities/templates', [
            'templates' => $templatesWithDetails,
            'projects' => $projects,
        ]);
    }

    /**
     * Store a new vulnerability template.
     */
    public function storeTemplate(Request $request)
    {
        // Validate the request data
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => 'required|string|in:critical,high,medium,low,info',
            'cvss' => 'nullable|numeric|min:0|max:10',
            'cve' => 'nullable|string|max:255',
            'recommendations' => 'nullable|string',
            'impact' => 'nullable|string',
            'references' => 'nullable|string',
            'tags' => 'nullable|string',
        ]);

        // Ensure severity is lowercase to match database constraints
        $validated['severity'] = strtolower($validated['severity']);

        // Create a new vulnerability template
        $template = new Vulnerability($validated);
        $template->is_template = true;
        $template->created_by = Auth::id();
        $template->updated_by = Auth::id();
        $template->save();

        // Redirect to the templates index
        return redirect()->route('vulnerability.templates');
    }

    /**
     * Update a vulnerability template.
     */
    public function updateTemplate(Request $request, Vulnerability $template)
    {
        // Validate the request data
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => 'required|string|in:critical,high,medium,low,info',
            'cvss' => 'nullable|numeric|min:0|max:10',
            'cve' => 'nullable|string|max:255',
            'recommendations' => 'nullable|string',
            'impact' => 'nullable|string',
            'references' => 'nullable|string',
            'tags' => 'nullable|string',
        ]);

        // Ensure severity is lowercase to match database constraints
        $validated['severity'] = strtolower($validated['severity']);

        // Update the template
        $template->update($validated);
        $template->updated_by = Auth::id();
        $template->save();

        // Redirect to the templates index
        return redirect()->route('vulnerability.templates');
    }

    /**
     * Apply a template to a project.
     */
    public function applyTemplate(Request $request)
    {
        // Validate the request data
        $validated = $request->validate([
            'template_id' => 'required|exists:vulnerabilities,id',
            'project_id' => 'required|exists:projects,id',
            'discovered_at' => 'nullable|date',
        ]);

        // Get the template
        $template = Vulnerability::findOrFail($validated['template_id']);
        
        // Create a new vulnerability based on the template
        $vulnerability = new Vulnerability();
        $vulnerability->project_id = $validated['project_id'];
        $vulnerability->name = $template->name;
        $vulnerability->description = $template->description;
        $vulnerability->severity = $template->severity;
        $vulnerability->cvss = $template->cvss;
        $vulnerability->cve = $template->cve;
        $vulnerability->recommendations = $template->recommendations;
        $vulnerability->impact = $template->impact;
        $vulnerability->references = $template->references;
        $vulnerability->tags = $template->tags;
        $vulnerability->is_template = false;
        $vulnerability->discovered_at = $validated['discovered_at'] ?? now();
        $vulnerability->created_by = Auth::id();
        $vulnerability->updated_by = Auth::id();
        $vulnerability->save();

        return redirect()->route('vulnerabilities.index');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request, Project $project)
    {
        // Validate the request data
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => 'required|string|in:critical,high,medium,low,info',
            'cvss' => 'nullable|numeric|min:0|max:10',
            'cve' => 'nullable|string|max:255',
            'recommendations' => 'nullable|string',
            'discovered_at' => 'required|date',
        ]);

        // Ensure severity is lowercase to match database constraints
        $validated['severity'] = strtolower($validated['severity']);

        // Create a new vulnerability
        $vulnerability = new Vulnerability($validated);
        $vulnerability->project_id = $project->id;
        $vulnerability->created_by = Auth::id();
        $vulnerability->updated_by = Auth::id();
        $vulnerability->save();

        // Return JSON response
        return response()->json($vulnerability, 201);
    }

    /**
     * Store a vulnerability from the vulnerabilities page.
     */
    public function storeVulnerability(Request $request)
    {
        // Validate the request data
        $validated = $request->validate([
            'project_id' => 'required|exists:projects,id',
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => 'required|string|in:critical,high,medium,low,info',
            'cvss' => 'nullable|numeric|min:0|max:10',
            'cve' => 'nullable|string|max:255',
            'recommendations' => 'nullable|string',
            'discovered_at' => 'required|date',
        ]);

        // Ensure severity is lowercase to match database constraints
        $validated['severity'] = strtolower($validated['severity']);

        // Create a new vulnerability
        $vulnerability = new Vulnerability($validated);
        $vulnerability->created_by = Auth::id();
        $vulnerability->updated_by = Auth::id();
        $vulnerability->save();

        // Redirect to the vulnerabilities index
        return redirect()->route('vulnerabilities.index');
    }

    /**
     * Display the specified resource.
     */
    public function show(Vulnerability $vulnerability)
    {
        // Return the vulnerability as a JSON response
        return response()->json($vulnerability);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Vulnerability $vulnerability)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Vulnerability $vulnerability)
    {
        // Validate the request data
        $validated = $request->validate([
            'project_id' => 'required|exists:projects,id',
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => 'required|string|in:critical,high,medium,low,info',
            'cvss' => 'nullable|numeric|min:0|max:10',
            'cve' => 'nullable|string|max:255',
            'recommendations' => 'nullable|string',
            'discovered_at' => 'required|date',
        ]);

        // Ensure severity is lowercase to match database constraints
        $validated['severity'] = strtolower($validated['severity']);

        // Update the vulnerability
        $vulnerability->update($validated);
        $vulnerability->updated_by = Auth::id();
        $vulnerability->save();

        // Redirect to the vulnerabilities index
        return redirect()->route('vulnerabilities.index');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Vulnerability $vulnerability)
    {
        // Delete the vulnerability
        $vulnerability->delete();

        // Return a 204 No Content response
        return response()->json(null, 204);
    }

    /**
     * Get common vulnerabilities for dashboard display.
     */
    public function commonVulnerabilities()
    {
        $vulnerabilities = Vulnerability::select('title', DB::raw('count(*) as count'))
            ->groupBy('title')
            ->orderBy('count', 'desc')
            ->take(5)
            ->get();
        return response()->json($vulnerabilities);
    }
}
