<?php

namespace App\Http\Controllers;

use App\Http\Requests\StoreVulnerabilityRequest;
use App\Http\Requests\UpdateVulnerabilityRequest;
use App\Models\Vulnerability;
use App\Models\Project;
use App\Models\Client;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class VulnerabilityController extends Controller
{
    /**
     * Display a listing of the resource for a specific project.
     */
    public function index(Project $project)
    {
        // Fetch vulnerabilities for the specified project
        $vulnerabilities = $project->vulnerabilities;

        // Return the vulnerabilities as a JSON response
        return response()->json($vulnerabilities);
    }

    /**
     * Display a listing of all vulnerabilities.
     */
    public function allVulnerabilities()
    {
        $vulnerabilities = Vulnerability::with(['project.client'])
            ->where('is_template', false)
            ->orderBy('created_at', 'desc')
            ->get();

        // Map the vulnerabilities to include project and client names
        $vulnerabilitiesWithDetails = $vulnerabilities->map(function ($vulnerability) {
            return [
                'id' => $vulnerability->id,
                'project_id' => $vulnerability->project_id,
                'client_id' => $vulnerability->project->client->id,
                'project_name' => $vulnerability->project->name,
                'client_name' => $vulnerability->project->client->name,
                'name' => $vulnerability->name,
                'description' => $vulnerability->description,
                'severity' => $vulnerability->severity,
                'cvss' => $vulnerability->cvss,
                'cve' => $vulnerability->cve,
                'remediation' => $vulnerability->recommendations,
                'discovered_at' => $vulnerability->discovered_at,
                'impact_score' => $vulnerability->impact_score,
                'likelihood_score' => $vulnerability->likelihood_score,
                'remediation_score' => $vulnerability->remediation_score,
            ];
        });

        $projects = Project::with('client')
            ->get()
            ->map(function ($project) {
                return [
                    'id' => $project->id,
                    'name' => $project->name,
                    'client_id' => $project->client_id,
                    'client_name' => $project->client->name,
                ];
            });
            
        // Get vulnerability templates with all relevant fields
        $templates = Vulnerability::where('is_template', true)
            ->orderBy('created_at', 'desc')
            ->get()
            ->map(function ($template) {
                return [
                    'id' => $template->id,
                    'name' => $template->name,
                    'description' => $template->description,
                    'severity' => $template->severity,
                    'cvss' => $template->cvss,
                    'cve' => $template->cve,
                    'recommendations' => $template->recommendations,
                    'impact' => $template->impact,
                    'references' => $template->references,
                    'tags' => $template->tags,
                    'likelihood_score' => $template->likelihood_score,
                    'remediation_score' => $template->remediation_score,
                    'impact_score' => $template->impact_score,
                    'affected_resources' => $template->affected_resources,
                ];
            });

        return Inertia::render('vulnerabilities/index', [
            'vulnerabilities' => $vulnerabilitiesWithDetails,
            'projects' => $projects,
            'templates' => $templates,
        ]);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request, Project $project)
    {
        // Validate the request data
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => 'required|string|in:critical,high,medium,low,info',
            'cvss' => 'nullable|numeric|min:0|max:10',
            'cve' => 'nullable|string|max:255',
            'recommendations' => 'nullable|string',
            'impact' => 'nullable|string',
            'status' => 'nullable|string',
            'remediation' => 'nullable|string',
            'remediation_steps' => 'nullable|string',
            'proof_of_concept' => 'nullable|string',
            'affected_components' => 'nullable|string',
            'notes' => 'nullable|string',
            'discovered_at' => 'nullable|date',
            'impact_score' => 'nullable|string|in:critical,high,medium,low,info',
            'likelihood_score' => 'nullable|string|in:critical,high,medium,low,info',
            'remediation_score' => 'nullable|string|in:critical,high,medium,low,info',
        ]);

        // Ensure severity is lowercase to match database constraints
        if (isset($validated['severity']) && $validated['severity'] !== null) {
            $validated['severity'] = strtolower($validated['severity']);
        }
        
        // Automatically set discovered_at to current time if not provided
        if (!isset($validated['discovered_at']) || empty($validated['discovered_at'])) {
            $validated['discovered_at'] = now();
        }

        // Create a new vulnerability
        $vulnerability = new Vulnerability($validated);
        $vulnerability->project_id = $project->id;
        $vulnerability->created_by = Auth::id();
        $vulnerability->updated_by = Auth::id();
        $vulnerability->save();

        // Return JSON response
        return response()->json($vulnerability, 201);
    }

    /**
     * Store a vulnerability from the vulnerabilities page.
     */
    public function storeVulnerability(Request $request)
    {
        // Validate the request data
        $validated = $request->validate([
            'project_id' => 'required|exists:projects,id',
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => 'required|string|in:critical,high,medium,low,info',
            'cvss' => 'nullable|numeric|min:0|max:10',
            'cve' => 'nullable|string|max:255',
            'status' => 'nullable|string',
            'remediation_steps' => 'nullable|string',
            'proof_of_concept' => 'nullable|string',
            'affected_components' => 'nullable|string',
            'notes' => 'nullable|string',
            'impact' => 'nullable|string',
            'discovered_at' => 'nullable|date',
            'impact_score' => 'nullable|string|in:critical,high,medium,low,info',
            'likelihood_score' => 'nullable|string|in:critical,high,medium,low,info',
            'remediation_score' => 'nullable|string|in:critical,high,medium,low,info',
        ]);

        // Ensure severity is lowercase to match database constraints
        if (isset($validated['severity']) && $validated['severity'] !== null) {
            $validated['severity'] = strtolower($validated['severity']);
        }
        
        // Automatically set discovered_at to current time if not provided
        if (!isset($validated['discovered_at']) || empty($validated['discovered_at'])) {
            $validated['discovered_at'] = now();
        }

        // Create a new vulnerability
        $vulnerability = new Vulnerability($validated);
        $vulnerability->created_by = Auth::id();
        $vulnerability->updated_by = Auth::id();
        $vulnerability->save();

        // Check if we're coming from a project page
        if ($request->header('Referer') && strpos($request->header('Referer'), 'projects/') !== false) {
            // Redirect back to the project page
            return redirect()->route('projects.show', $validated['project_id']);
        }
        
        // Redirect to the vulnerabilities index
        return redirect()->route('vulnerabilities.index');
    }

    /**
     * Display the specified resource.
     */
    public function show(Vulnerability $vulnerability)
    {
        $project = $vulnerability->project;
        $client = $project->client;
        
        return Inertia::render('vulnerabilities/show', [
            'vulnerability' => $vulnerability,
            'project' => $project,
            'client' => $client,
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Vulnerability $vulnerability)
    {
        $project = $vulnerability->project;
        $client = $project->client;
        
        return Inertia::render('vulnerabilities/edit', [
            'vulnerability' => $vulnerability,
            'project' => $project,
            'client' => $client,
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Vulnerability $vulnerability)
    {
        // Validate the request data
        $validated = $request->validate([
            'project_id' => 'required|exists:projects,id',
            'name' => 'required|string|max:255',
            'description' => 'required|string',
            'severity' => 'required|string|in:critical,high,medium,low,info',
            'cvss' => 'nullable|numeric|min:0|max:10',
            'cve' => 'nullable|string|max:255',
            'status' => 'required|string|in:open,in progress,fixed,won\'t fix',
            'remediation_steps' => 'nullable|string',
            'proof_of_concept' => 'nullable|string',
            'affected_components' => 'nullable|string',
            'notes' => 'nullable|string',
            'discovered_at' => 'nullable|date',
            'impact_score' => 'nullable|string|in:critical,high,medium,low,info',
            'likelihood_score' => 'nullable|string|in:critical,high,medium,low,info',
            'remediation_score' => 'nullable|string|in:critical,high,medium,low,info',
        ]);

        // Ensure severity and status are lowercase to match database constraints
        if (isset($validated['severity']) && $validated['severity'] !== null) {
            $validated['severity'] = strtolower($validated['severity']);
        }
        if (isset($validated['status']) && $validated['status'] !== null) {
            $validated['status'] = strtolower($validated['status']);
        }

        // Automatically set discovered_at to current time if not provided
        if (!isset($validated['discovered_at']) || empty($validated['discovered_at'])) {
            $validated['discovered_at'] = now();
        }

        // Update the vulnerability
        $vulnerability->update($validated);
        $vulnerability->updated_by = Auth::id();
        $vulnerability->save();

        // Check if we're coming from a project page
        if ($request->header('Referer') && strpos($request->header('Referer'), 'projects/') !== false) {
            // Redirect back to the project page
            return redirect()->route('projects.show', $vulnerability->project_id);
        }

        // Redirect back to the vulnerability details
        return redirect()->route('vulnerabilities.show', $vulnerability->id);
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Vulnerability $vulnerability)
    {
        // Delete the vulnerability
        $vulnerability->delete();

        // Return a 204 No Content response
        return response()->json(null, 204);
    }

    /**
     * Get common vulnerabilities for dashboard display.
     */
    public function commonVulnerabilities()
    {
        $vulnerabilities = Vulnerability::select('title', DB::raw('count(*) as count'))
            ->groupBy('title')
            ->orderBy('count', 'desc')
            ->take(5)
            ->get();
        return response()->json($vulnerabilities);
    }
}
