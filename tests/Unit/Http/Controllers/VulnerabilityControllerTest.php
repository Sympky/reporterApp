<?php

namespace Tests\Unit\Http\Controllers;

use App\Http\Controllers\VulnerabilityController;
use App\Models\Client;
use App\Models\Project;
use App\Models\User;
use App\Models\Vulnerability;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Inertia\Inertia;
use Inertia\Response as InertiaResponse;
use Mockery;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

class VulnerabilityControllerTest extends TestCase
{
    use RefreshDatabase;
    
    protected $vulnerabilityController;
    protected $user;
    protected $client;
    protected $project;
    
    protected function setUp(): void
    {
        parent::setUp();
        
        // Create a better Inertia mock
        $inertiaMock = Mockery::mock('overload:Inertia\Inertia');
        $inertiaMock->shouldReceive('render')->andReturnUsing(function ($component, $props = []) {
            $responseMock = Mockery::mock(InertiaResponse::class);
            $responseMock->shouldReceive('getStatusCode')->andReturn(200);
            return $responseMock;
        });
        
        // Create the controller
        $this->vulnerabilityController = new VulnerabilityController();
        
        // Create a user and set as authenticated
        $this->user = User::factory()->create();
        Auth::shouldReceive('id')->andReturn($this->user->id);
        
        // Create client and project for the tests
        $this->client = Client::factory()->create([
            'created_by' => $this->user->id
        ]);
        
        $this->project = Project::factory()->create([
            'client_id' => $this->client->id,
            'created_by' => $this->user->id
        ]);
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }

    #[Test]
    public function index_method_displays_vulnerabilities_list()
    {
        // Execute the controller method
        $response = $this->vulnerabilityController->index($this->project);
        
        // Assert the response
        $this->assertEquals(200, $response->getStatusCode());
    }

    #[Test]
    public function store_method_creates_new_vulnerability()
    {
        // Setup request data
        $data = [
            'name' => 'Test Vulnerability',
            'description' => 'Test description',
            'severity' => 'high',
            'cvss' => '8.1',
            'cve' => 'CVE-2023-1234',
            'status' => 'open',
            'remediation' => 'Test remediation',
            'remediation_steps' => 'Test steps',
            'proof_of_concept' => 'Test POC',
            'affected_components' => 'Test components',
            'notes' => 'Test notes',
        ];
        
        $request = new Request($data);
        
        // Execute the controller method
        $response = $this->vulnerabilityController->store($request, $this->project);
        
        // Assert the response
        $this->assertEquals(201, $response->getStatusCode());
        
        // Assert the vulnerability was created
        $this->assertDatabaseHas('vulnerabilities', [
            'name' => 'Test Vulnerability',
            'project_id' => $this->project->id,
            'created_by' => $this->user->id
        ]);
    }

    #[Test]
    public function show_method_displays_vulnerability_details()
    {
        // Create test data
        $vulnerability = Vulnerability::factory()->create([
            'project_id' => $this->project->id,
            'created_by' => $this->user->id
        ]);
        
        // Execute the controller method
        $response = $this->vulnerabilityController->show($vulnerability);
        
        // Assert the response
        $this->assertEquals(200, $response->getStatusCode());
    }

    #[Test]
    public function edit_method_returns_edit_form()
    {
        // Create test data
        $vulnerability = Vulnerability::factory()->create([
            'project_id' => $this->project->id,
            'created_by' => $this->user->id
        ]);
        
        // Execute the controller method
        $response = $this->vulnerabilityController->edit($vulnerability);
        
        // Assert the response
        $this->assertEquals(200, $response->getStatusCode());
    }

    #[Test]
    public function update_method_updates_vulnerability()
    {
        // Create test data
        $vulnerability = Vulnerability::factory()->create([
            'name' => 'Original Vulnerability',
            'project_id' => $this->project->id,
            'severity' => 'medium',
            'created_by' => $this->user->id
        ]);
        
        // Setup request data
        $data = [
            'name' => 'Updated Vulnerability',
            'project_id' => $this->project->id,
            'cvss_score' => '9.1',
            'severity' => 'critical',
            'description' => 'Updated description',
            'status' => 'fixed'
        ];
        
        $request = new Request($data);
        
        // Execute the controller method
        $response = $this->vulnerabilityController->update($request, $vulnerability);
        
        // Assert the response
        $this->assertEquals(302, $response->getStatusCode());
        
        // Assert the vulnerability was updated
        $this->assertDatabaseHas('vulnerabilities', [
            'id' => $vulnerability->id,
            'name' => 'Updated Vulnerability'
        ]);
    }

    #[Test]
    public function destroy_method_deletes_vulnerability()
    {
        // Create test data
        $vulnerability = Vulnerability::factory()->create([
            'project_id' => $this->project->id,
            'created_by' => $this->user->id
        ]);
        
        // Store the ID for later assertion
        $id = $vulnerability->id;
        
        // Execute the controller method
        $response = $this->vulnerabilityController->destroy($vulnerability);
        
        // Assert the response
        $this->assertEquals(204, $response->getStatusCode());
        
        // Assert the vulnerability was deleted
        $this->assertDatabaseMissing('vulnerabilities', ['id' => $id]);
    }
} 