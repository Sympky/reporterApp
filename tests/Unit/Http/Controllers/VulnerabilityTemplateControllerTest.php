<?php

namespace Tests\Unit\Http\Controllers;

use App\Http\Controllers\VulnerabilityTemplateController;
use App\Models\User;
use App\Models\Vulnerability;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Inertia\Inertia;
use Inertia\Response as InertiaResponse;
use Mockery;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

class VulnerabilityTemplateControllerTest extends TestCase
{
    use RefreshDatabase;
    
    protected $vulnerabilityTemplateController;
    protected $user;
    
    protected function setUp(): void
    {
        parent::setUp();
        
        // Mock Inertia facade
        // Create a better Inertia mock that returns an InertiaResponse
        $inertiaMock = Mockery::mock('overload:Inertia\Inertia');
        $inertiaMock->shouldReceive('render')->andReturnUsing(function ($component, $props = []) {
            $responseMock = Mockery::mock(InertiaResponse::class);
            $responseMock->shouldReceive('getStatusCode')->andReturn(200);
            return $responseMock;
        });
        
        // Create the controller
        $this->vulnerabilityTemplateController = new VulnerabilityTemplateController();
        
        // Create a user and set as authenticated
        $this->user = User::factory()->create();
        Auth::shouldReceive('id')->andReturn($this->user->id);
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }

    #[Test]
    public function index_method_displays_templates_list()
    {
        // Mock request
        $request = new Request();
        
        // Create test data - we'll use the Vulnerability model for templates
        // as per the controller implementation
        $templates = Vulnerability::factory()->count(3)->create([
            'is_template' => true,
            'created_by' => $this->user->id
        ]);
        
        // Execute the controller method
        $response = $this->vulnerabilityTemplateController->index($request);
        
        // Assert the response
        $this->assertEquals(200, $response->getStatusCode());
    }

    #[Test]
    public function create_method_returns_form_view()
    {
        // Execute the controller method
        $response = $this->vulnerabilityTemplateController->create();
        
        // Assert the response
        $this->assertEquals(200, $response->getStatusCode());
    }

    #[Test]
    public function store_method_creates_new_template()
    {
        // Setup request data
        $data = [
            'title' => 'SQL Injection Template',
            'cvss_score' => '8.5',
            'severity' => 'high',
            'description' => 'SQL Injection vulnerability template description',
            'remediation' => 'Parameterize all SQL queries',
            'references' => 'OWASP Top 10'
        ];
        
        $request = new Request($data);
        
        // Execute the controller method
        $response = $this->vulnerabilityTemplateController->store($request);
        
        // Assert the response
        $this->assertEquals(302, $response->getStatusCode()); // Redirect status code
        
        // Assert the template was created in the database
        $this->assertDatabaseHas('vulnerabilities', [
            'title' => 'SQL Injection Template',
            'severity' => 'high',
            'is_template' => true,
            'created_by' => $this->user->id
        ]);
    }

    #[Test]
    public function show_method_displays_template_details()
    {
        // Create test data
        $template = Vulnerability::factory()->create([
            'is_template' => true,
            'created_by' => $this->user->id
        ]);
        
        // Execute the controller method
        $response = $this->vulnerabilityTemplateController->show($template);
        
        // Assert the response
        $this->assertEquals(200, $response->getStatusCode());
    }

    #[Test]
    public function edit_method_returns_edit_form()
    {
        // Create test data
        $template = Vulnerability::factory()->create([
            'is_template' => true,
            'created_by' => $this->user->id
        ]);
        
        // Execute the controller method
        $response = $this->vulnerabilityTemplateController->edit($template);
        
        // Assert the response
        $this->assertEquals(200, $response->getStatusCode());
    }

    #[Test]
    public function update_method_updates_template()
    {
        // Create test data
        $template = Vulnerability::factory()->create([
            'title' => 'Original Template',
            'severity' => 'medium',
            'is_template' => true,
            'created_by' => $this->user->id
        ]);
        
        // Setup request data
        $data = [
            'title' => 'Updated Template',
            'cvss_score' => '9.1',
            'severity' => 'critical',
            'description' => 'Updated description',
            'remediation' => 'Updated remediation'
        ];
        
        $request = new Request($data);
        
        // Execute the controller method
        $response = $this->vulnerabilityTemplateController->update($request, $template);
        
        // Assert the response
        $this->assertEquals(302, $response->getStatusCode()); // Redirect status code
        
        // Assert the template was updated in the database
        $this->assertDatabaseHas('vulnerabilities', [
            'id' => $template->id,
            'title' => 'Updated Template',
            'severity' => 'critical',
            'is_template' => true
        ]);
    }

    #[Test]
    public function destroy_method_deletes_template()
    {
        // Create test data
        $template = Vulnerability::factory()->create([
            'is_template' => true,
            'created_by' => $this->user->id
        ]);
        
        // Execute the controller method
        $response = $this->vulnerabilityTemplateController->destroy($template);
        
        // Assert the response
        $this->assertEquals(302, $response->getStatusCode()); // Redirect status code
        
        // Assert the template was deleted from the database
        $this->assertDatabaseMissing('vulnerabilities', [
            'id' => $template->id
        ]);
    }
} 