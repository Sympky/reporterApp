<?php

namespace Tests\Unit\Services;

use App\Models\Project;
use App\Models\User;
use App\Models\Vulnerability;
use App\Services\VulnerabilityImportService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Maatwebsite\Excel\Facades\Excel;
use Mockery;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

class VulnerabilityImportServiceTest extends TestCase
{
    use RefreshDatabase;

    protected $service;
    protected $user;
    protected $project;
    protected $disk;

    protected function setUp(): void
    {
        parent::setUp();

        // Mock Auth facade
        $this->user = User::factory()->create();
        Auth::shouldReceive('id')->andReturn($this->user->id);

        // Create a test project
        $this->project = Project::factory()->create([
            'created_by' => $this->user->id
        ]);

        // Set up fake disk for file operations
        Storage::fake('local');
        $this->disk = Storage::disk('local');
        
        // Create the service
        $this->service = new VulnerabilityImportService();
        
        // Mock the Log facade to avoid polluting logs during tests
        Log::shouldReceive('info')->andReturn(null);
        Log::shouldReceive('debug')->andReturn(null);
        Log::shouldReceive('warning')->andReturn(null);
        Log::shouldReceive('error')->andReturn(null);
    }

    protected function tearDown(): void
    {
        Mockery::close();
        parent::tearDown();
    }

    /**
     * Helper method to create a valid CSV file for testing
     */
    protected function createValidCsvFile(): UploadedFile
    {
        $csvContent = "name,description,severity,cvss,cve,recommendations,impact,references,tags\n";
        $csvContent .= "Test Vulnerability,This is a test description,High,8.5,CVE-2023-1234,Fix it,Major impact,https://example.com,sql-injection,xss";
        
        $filePath = $this->disk->path('test_vulnerabilities.csv');
        file_put_contents($filePath, $csvContent);
        
        return new UploadedFile(
            $filePath,
            'test_vulnerabilities.csv',
            'text/csv',
            null,
            true
        );
    }

    /**
     * Helper method to create an invalid CSV file for testing
     */
    protected function createInvalidCsvFile(): UploadedFile
    {
        $csvContent = "invalid,headers,here\n";
        $csvContent .= "Data1,Data2,Data3";
        
        $filePath = $this->disk->path('invalid_vulnerabilities.csv');
        file_put_contents($filePath, $csvContent);
        
        return new UploadedFile(
            $filePath,
            'invalid_vulnerabilities.csv',
            'text/csv',
            null,
            true
        );
    }

    /**
     * Helper method to create an empty CSV file for testing
     */
    protected function createEmptyCsvFile(): UploadedFile
    {
        $filePath = $this->disk->path('empty.csv');
        file_put_contents($filePath, '');
        
        return new UploadedFile(
            $filePath,
            'empty.csv',
            'text/csv',
            null,
            true
        );
    }

    #[Test]
    public function it_rejects_invalid_file_extensions()
    {
        // Create a text file with wrong extension
        $file = UploadedFile::fake()->create('test.txt', 100);
        
        // Attempt to import
        $result = $this->service->import($file, $this->project->id);
        
        // Assertions
        $this->assertFalse($result['success']);
        $this->assertEquals('Invalid file format. Please upload a CSV or Excel file.', $result['message']);
        $this->assertEquals(0, $result['imported']);
        $this->assertEmpty($result['errors']);
    }

    #[Test]
    public function it_handles_empty_files()
    {
        // Create an empty CSV file
        $file = $this->createEmptyCsvFile();
        
        // Mock Excel facade to simulate empty result
        Excel::shouldReceive('toCollection')
            ->once()
            ->andReturn(collect([]));
        
        // Attempt to import
        $result = $this->service->import($file, $this->project->id);
        
        // Assertions
        $this->assertFalse($result['success']);
        $this->assertEquals('The uploaded file is empty. Please check the file and try again.', $result['message']);
        $this->assertEquals(0, $result['imported']);
        $this->assertEmpty($result['errors']);
    }

    #[Test]
    public function it_validates_required_headers()
    {
        // Create a CSV file with invalid headers
        $file = $this->createInvalidCsvFile();
        
        // Mock the Excel facade to return expected data
        Excel::shouldReceive('toCollection')
            ->once()
            ->andReturn(collect([
                collect([
                    ['invalid' => 'value1', 'headers' => 'value2', 'here' => 'value3'],
                ])
            ]));
        
        // Attempt to import
        $result = $this->service->import($file, $this->project->id);
        
        // Assertions
        $this->assertFalse($result['success']);
        $this->assertStringContainsString('missing required headers', $result['message']);
        $this->assertEquals(0, $result['imported']);
        $this->assertNotEmpty($result['errors']);
    }

    #[Test]
    public function it_successfully_imports_vulnerabilities()
    {
        // Create a valid CSV file
        $file = $this->createValidCsvFile();
        
        // Prepare test data that Excel would return
        $excelData = collect([
            collect([
                ['name' => 'Name Header', 'description' => 'Description Header', 'severity' => 'Severity Header'],
                ['name' => 'Test Vulnerability', 'description' => 'This is a test', 'severity' => 'High', 'cvss' => '8.5']
            ])
        ]);
        
        // Mock Excel facade
        Excel::shouldReceive('toCollection')
            ->once()
            ->andReturn($excelData);
        
        // Attempt to import
        $result = $this->service->import($file, $this->project->id);
        
        // Assertions
        $this->assertTrue($result['success']);
        $this->assertStringContainsString('completed successfully', $result['message']);
        $this->assertEquals(1, $result['imported']);
        $this->assertEmpty($result['errors']);
        
        // Check database record
        $this->assertDatabaseHas('vulnerabilities', [
            'name' => 'Test Vulnerability',
            'description' => 'This is a test',
            'severity' => 'high', // Note: service converts to lowercase
            'project_id' => $this->project->id,
            'is_template' => false
        ]);
    }

    #[Test]
    public function it_imports_as_template_when_specified()
    {
        // Create a valid CSV file
        $file = $this->createValidCsvFile();
        
        // Prepare test data that Excel would return
        $excelData = collect([
            collect([
                ['name' => 'Name Header', 'description' => 'Description Header', 'severity' => 'Severity Header'],
                ['name' => 'Template Vulnerability', 'description' => 'Template description', 'severity' => 'High']
            ])
        ]);
        
        // Mock Excel facade
        Excel::shouldReceive('toCollection')
            ->once()
            ->andReturn($excelData);
        
        // Attempt to import as template (no project ID, isTemplate = true)
        $result = $this->service->import($file, null, true);
        
        // Assertions
        $this->assertTrue($result['success']);
        $this->assertEquals(1, $result['imported']);
        
        // Check database record
        $this->assertDatabaseHas('vulnerabilities', [
            'name' => 'Template Vulnerability',
            'description' => 'Template description',
            'severity' => 'high',
            'project_id' => null,
            'is_template' => true
        ]);
    }

    #[Test]
    public function it_normalizes_severity_values()
    {
        // Prepare test data with various severity formats
        $excelData = collect([
            collect([
                ['name' => 'Name', 'description' => 'Description', 'severity' => 'Severity'],
                ['name' => 'Vuln 1', 'description' => 'Desc 1', 'severity' => 'critical'],
                ['name' => 'Vuln 2', 'description' => 'Desc 2', 'severity' => 'HIGH'],
                ['name' => 'Vuln 3', 'description' => 'Desc 3', 'severity' => 'medium risk'],
                ['name' => 'Vuln 4', 'description' => 'Desc 4', 'severity' => 'LOW impact'],
                ['name' => 'Vuln 5', 'description' => 'Desc 5', 'severity' => 'info']
            ])
        ]);
        
        // Mock Excel facade
        Excel::shouldReceive('toCollection')
            ->once()
            ->andReturn($excelData);
        
        // Create a file and import
        $file = UploadedFile::fake()->create('severities.csv', 100, 'text/csv');
        $result = $this->service->import($file, $this->project->id);
        
        // Assertions
        $this->assertTrue($result['success']);
        $this->assertEquals(5, $result['imported']);
        
        // Check that severities were normalized
        $this->assertDatabaseHas('vulnerabilities', ['name' => 'Vuln 1', 'severity' => 'critical']);
        $this->assertDatabaseHas('vulnerabilities', ['name' => 'Vuln 2', 'severity' => 'high']);
        $this->assertDatabaseHas('vulnerabilities', ['name' => 'Vuln 3', 'severity' => 'medium']);
        $this->assertDatabaseHas('vulnerabilities', ['name' => 'Vuln 4', 'severity' => 'low']);
        $this->assertDatabaseHas('vulnerabilities', ['name' => 'Vuln 5', 'severity' => 'info']);
    }

    #[Test]
    public function it_handles_parsing_errors()
    {
        // Create a file
        $file = UploadedFile::fake()->create('corrupted.csv', 100, 'text/csv');
        
        // Mock Excel facade to throw an exception
        Excel::shouldReceive('toCollection')
            ->once()
            ->andThrow(new \Exception('Failed to parse file'));
        
        // Attempt to import
        $result = $this->service->import($file, $this->project->id);
        
        // Assertions
        $this->assertFalse($result['success']);
        $this->assertStringContainsString('Failed to parse the file', $result['message']);
        $this->assertEquals(0, $result['imported']);
    }
    
    #[Test]
    public function it_validates_cvss_values()
    {
        // Prepare test data with invalid CVSS value
        $excelData = collect([
            collect([
                ['name' => 'Name', 'description' => 'Description', 'severity' => 'Severity', 'cvss' => 'CVSS'],
                ['name' => 'Valid CVSS', 'description' => 'Description', 'severity' => 'High', 'cvss' => '7.5'],
                ['name' => 'Invalid CVSS', 'description' => 'Description', 'severity' => 'High', 'cvss' => '11.5']
            ])
        ]);
        
        // Mock Excel facade
        Excel::shouldReceive('toCollection')
            ->once()
            ->andReturn($excelData);
        
        // Create a file and import
        $file = UploadedFile::fake()->create('cvss_test.csv', 100, 'text/csv');
        $result = $this->service->import($file, $this->project->id);
        
        // Assertions for overall result
        $this->assertTrue($result['success']);
        $this->assertEquals(1, $result['imported']);
        $this->assertNotEmpty($result['errors']);
        
        // Ensure valid CVSS was imported
        $this->assertDatabaseHas('vulnerabilities', [
            'name' => 'Valid CVSS',
            'cvss' => 7.5
        ]);
        
        // Ensure invalid CVSS was rejected
        $this->assertDatabaseMissing('vulnerabilities', [
            'name' => 'Invalid CVSS'
        ]);
    }
    
    #[Test]
    public function it_formats_tags_correctly()
    {
        // Prepare test data with tags in different formats
        $excelData = collect([
            collect([
                ['name' => 'Name', 'description' => 'Description', 'severity' => 'Severity', 'tags' => 'Tags'],
                [
                    'name' => 'With Tags', 
                    'description' => 'Description', 
                    'severity' => 'High', 
                    'tags' => 'sql-injection, xss, authentication'
                ]
            ])
        ]);
        
        // Mock Excel facade
        Excel::shouldReceive('toCollection')
            ->once()
            ->andReturn($excelData);
        
        // Create a file and import
        $file = UploadedFile::fake()->create('tags_test.csv', 100, 'text/csv');
        $result = $this->service->import($file, $this->project->id);
        
        // Assertions
        $this->assertTrue($result['success']);
        $this->assertEquals(1, $result['imported']);
        
        // Check the tags were properly formatted as an array
        $vulnerability = Vulnerability::where('name', 'With Tags')->first();
        $this->assertNotNull($vulnerability);
        $this->assertIsArray($vulnerability->tags);
        $this->assertEquals(['sql-injection', 'xss', 'authentication'], $vulnerability->tags);
    }
    
    #[Test]
    public function it_handles_transaction_errors()
    {
        // Create a valid CSV file
        $file = $this->createValidCsvFile();
        
        // Prepare test data
        $excelData = collect([
            collect([
                ['name' => 'Name', 'description' => 'Description', 'severity' => 'Severity'],
                ['name' => 'Test Transaction', 'description' => 'Description', 'severity' => 'High']
            ])
        ]);
        
        // Mock Excel facade
        Excel::shouldReceive('toCollection')
            ->once()
            ->andReturn($excelData);
        
        // Mock DB to simulate a transaction error
        $mock = Mockery::mock('alias:Illuminate\Support\Facades\DB');
        $mock->shouldReceive('beginTransaction')->once();
        $mock->shouldReceive('commit')->never();
        $mock->shouldReceive('rollBack')->once();
        
        // Create a mock Vulnerability model that throws an exception
        $mockVulnerability = Mockery::mock('overload:App\Models\Vulnerability');
        $mockVulnerability->shouldReceive('fill')->andThrow(new \Exception('Database error'));
        $mockVulnerability->shouldReceive('save')->never();
        
        // Attempt to import
        $result = $this->service->import($file, $this->project->id);
        
        // Assertions
        $this->assertFalse($result['success']);
        $this->assertStringContainsString('An error occurred during import', $result['message']);
    }
}